/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import { z } from 'zod';
;
import type { Prisma } from '@prisma/client';

;
import { TaskNodeSelectObjectSchema } from '../objects/TaskNodeSelect.schema';
;
import { TaskNodeWhereUniqueInputObjectSchema } from '../objects/TaskNodeWhereUniqueInput.schema';
import { TaskNodeWhereInputObjectSchema } from '../objects/TaskNodeWhereInput.schema';
import { TaskNodeOrderByWithRelationInputObjectSchema } from '../objects/TaskNodeOrderByWithRelationInput.schema';
import { TaskNodeScalarFieldEnumSchema } from '../enums/TaskNodeScalarFieldEnum.schema';
import { TaskNodeCreateInputObjectSchema } from '../objects/TaskNodeCreateInput.schema';
import { TaskNodeUncheckedCreateInputObjectSchema } from '../objects/TaskNodeUncheckedCreateInput.schema';
import { TaskNodeCreateManyInputObjectSchema } from '../objects/TaskNodeCreateManyInput.schema';
import { TaskNodeUpdateInputObjectSchema } from '../objects/TaskNodeUpdateInput.schema';
import { TaskNodeUncheckedUpdateInputObjectSchema } from '../objects/TaskNodeUncheckedUpdateInput.schema';
import { TaskNodeUpdateManyMutationInputObjectSchema } from '../objects/TaskNodeUpdateManyMutationInput.schema';
import { TaskNodeUncheckedUpdateManyInputObjectSchema } from '../objects/TaskNodeUncheckedUpdateManyInput.schema';
import { TaskNodeCountAggregateInputObjectSchema } from '../objects/TaskNodeCountAggregateInput.schema';
import { TaskNodeMinAggregateInputObjectSchema } from '../objects/TaskNodeMinAggregateInput.schema';
import { TaskNodeMaxAggregateInputObjectSchema } from '../objects/TaskNodeMaxAggregateInput.schema';
import { TaskNodeOrderByWithAggregationInputObjectSchema } from '../objects/TaskNodeOrderByWithAggregationInput.schema';
import { TaskNodeScalarWhereWithAggregatesInputObjectSchema } from '../objects/TaskNodeScalarWhereWithAggregatesInput.schema'

type TaskNodeInputSchemaType = {
    findUnique: z.ZodType<Prisma.TaskNodeFindUniqueArgs>,
    findFirst: z.ZodType<Prisma.TaskNodeFindFirstArgs>,
    findMany: z.ZodType<Prisma.TaskNodeFindManyArgs>,
    create: z.ZodType<Prisma.TaskNodeCreateArgs>,
    createMany: z.ZodType<Prisma.TaskNodeCreateManyArgs>,
    delete: z.ZodType<Prisma.TaskNodeDeleteArgs>,
    deleteMany: z.ZodType<Prisma.TaskNodeDeleteManyArgs>,
    update: z.ZodType<Prisma.TaskNodeUpdateArgs>,
    updateMany: z.ZodType<Prisma.TaskNodeUpdateManyArgs>,
    upsert: z.ZodType<Prisma.TaskNodeUpsertArgs>,
    aggregate: z.ZodType<Prisma.TaskNodeAggregateArgs>,
    groupBy: z.ZodType<Prisma.TaskNodeGroupByArgs>,
    count: z.ZodType<Prisma.TaskNodeCountArgs>
}

export const TaskNodeInputSchema = {
    findUnique: z.object({
        select: z.lazy(() => TaskNodeSelectObjectSchema.optional()), where: TaskNodeWhereUniqueInputObjectSchema
    }).strict(), findFirst: z.object({
        select: z.lazy(() => TaskNodeSelectObjectSchema.optional()), where: TaskNodeWhereInputObjectSchema.optional(), orderBy: z.union([TaskNodeOrderByWithRelationInputObjectSchema, TaskNodeOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: TaskNodeWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.array(TaskNodeScalarFieldEnumSchema).optional()
    }).strict(), findMany: z.object({
        select: z.lazy(() => TaskNodeSelectObjectSchema.optional()), where: TaskNodeWhereInputObjectSchema.optional(), orderBy: z.union([TaskNodeOrderByWithRelationInputObjectSchema, TaskNodeOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: TaskNodeWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.array(TaskNodeScalarFieldEnumSchema).optional()
    }).strict(), create: z.object({
        select: z.lazy(() => TaskNodeSelectObjectSchema.optional()), data: z.union([TaskNodeCreateInputObjectSchema, TaskNodeUncheckedCreateInputObjectSchema])
    }).strict(), createMany: z.object({
        data: z.union([TaskNodeCreateManyInputObjectSchema, z.array(TaskNodeCreateManyInputObjectSchema)]), skipDuplicates: z.boolean().optional()
    }).strict(), 'delete': z.object({
        select: z.lazy(() => TaskNodeSelectObjectSchema.optional()), where: TaskNodeWhereUniqueInputObjectSchema
    }).strict(), deleteMany: z.object({
        where: TaskNodeWhereInputObjectSchema.optional()
    }).strict(), update: z.object({
        select: z.lazy(() => TaskNodeSelectObjectSchema.optional()), data: z.union([TaskNodeUpdateInputObjectSchema, TaskNodeUncheckedUpdateInputObjectSchema]), where: TaskNodeWhereUniqueInputObjectSchema
    }).strict(), updateMany: z.object({
        data: z.union([TaskNodeUpdateManyMutationInputObjectSchema, TaskNodeUncheckedUpdateManyInputObjectSchema]), where: TaskNodeWhereInputObjectSchema.optional()
    }).strict(), upsert: z.object({
        select: z.lazy(() => TaskNodeSelectObjectSchema.optional()), where: TaskNodeWhereUniqueInputObjectSchema, create: z.union([TaskNodeCreateInputObjectSchema, TaskNodeUncheckedCreateInputObjectSchema]), update: z.union([TaskNodeUpdateInputObjectSchema, TaskNodeUncheckedUpdateInputObjectSchema])
    }).strict(), aggregate: z.object({
        where: TaskNodeWhereInputObjectSchema.optional(), orderBy: z.union([TaskNodeOrderByWithRelationInputObjectSchema, TaskNodeOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: TaskNodeWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), _count: z.union([z.literal(true), TaskNodeCountAggregateInputObjectSchema]).optional(), _min: TaskNodeMinAggregateInputObjectSchema.optional(), _max: TaskNodeMaxAggregateInputObjectSchema.optional()
    }).strict(), groupBy: z.object({
        where: TaskNodeWhereInputObjectSchema.optional(), orderBy: z.union([TaskNodeOrderByWithAggregationInputObjectSchema, TaskNodeOrderByWithAggregationInputObjectSchema.array()]).optional(), having: TaskNodeScalarWhereWithAggregatesInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), by: z.array(TaskNodeScalarFieldEnumSchema), _count: z.union([z.literal(true), TaskNodeCountAggregateInputObjectSchema]).optional(), _min: TaskNodeMinAggregateInputObjectSchema.optional(), _max: TaskNodeMaxAggregateInputObjectSchema.optional()
    }).strict(), count: z.object({
        where: TaskNodeWhereInputObjectSchema.optional(), orderBy: z.union([TaskNodeOrderByWithRelationInputObjectSchema, TaskNodeOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: TaskNodeWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.array(TaskNodeScalarFieldEnumSchema).optional(), select: z.union([z.literal(true), TaskNodeCountAggregateInputObjectSchema]).optional()
    }).strict(),
} as TaskNodeInputSchemaType;
